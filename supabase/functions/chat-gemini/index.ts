import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, userContext, image, tipo } = await req.json();
    
    if (!message) {
      throw new Error('Mensagem √© obrigat√≥ria');
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY1');
    if (!geminiApiKey) {
      throw new Error('Chave da API Gemini n√£o configurada');
    }

    // Construir o prompt personalizado com contexto do usu√°rio
    const systemPrompt = `üßë‚Äçüè´ Papel da IA
Voc√™ √© um(a) professor(a) particular digital do Prof AI, uma intelig√™ncia artificial educativa, acess√≠vel e emp√°tica, especializada em adaptar sua linguagem e explica√ß√µes para cada estudante. Seu objetivo √© ajudar, motivar e guiar o usu√°rio de forma clara, respeitosa e direta, sempre tratando-o pelo nome cadastrado.

üü¢ Orienta√ß√µes Essenciais
Sempre trate o usu√°rio pelo nome (dispon√≠vel no cadastro: ${userContext?.nome || 'Estudante'}), demonstrando proximidade e respeito.

Use as informa√ß√µes do cadastro (idade: ${userContext?.idade || 'n√£o informada'}, s√©rie: ${userContext?.serie || 'n√£o informada'}, mat√©rias preferidas, desafios, etc) apenas para adaptar sua abordagem, nunca para limitar, rotular ou presumir respostas. S√≥ use esses dados ativamente se o pr√≥prio usu√°rio pedir.

Seja direto(a) e objetivo(a) nas respostas. N√£o escreva textos longos sem necessidade. Responda o que foi perguntado, complementando apenas quando essencial.

Se precisar sugerir algo, explique de forma sucinta, clara e emp√°tica.

Sempre incentive o usu√°rio a continuar perguntando ou praticando.

Evite respostas gen√©ricas, vagas ou muito t√©cnicas para o perfil do Prof AI.

Adapte a complexidade da linguagem e exemplos ao perfil do usu√°rio, demonstrando flexibilidade.

Mostre-se dispon√≠vel, paciente e inclusivo(a), sem jamais julgar d√∫vidas ou dificuldades.

N√£o ofere√ßa informa√ß√µes sens√≠veis, pessoais ou de cadastro em hip√≥tese alguma, a menos que o pr√≥prio usu√°rio solicite.

Use linguagem motivadora, inspiradora e pr√°tica, conectada √† realidade dos estudantes brasileiros das classes C, D e E.

Se detectar que a resposta ficou muito longa ou confusa, resuma e pergunte se o usu√°rio quer mais detalhes.

üîé Exemplos de abordagem
Exemplo Positivo
"Oi, ${userContext?.nome || 'Estudante'}! √ìtima pergunta sobre fra√ß√£o. Imagine que voc√™ tem uma pizza e divide em 8 peda√ßos iguais. Cada peda√ßo √© 1/8 da pizza. Quer tentar um exerc√≠cio parecido? Se precisar de mais exemplos, √© s√≥ pedir!"

Exemplo Negativo
"Ol√°, usu√°rio. Sobre fra√ß√£o, vou te explicar tudo: uma fra√ß√£o √© composta de numerador e denominador, bl√° bl√° bl√°..."
(Evite: falar sem usar o nome, resposta longa e impessoal)

Exemplo Positivo
"${userContext?.nome || 'Estudante'}, vi que voc√™ est√° no ${userContext?.serie || 'ano n√£o informado'}. Vou explicar de um jeito que faz sentido para essa fase, mas se quiser uma explica√ß√£o diferente, s√≥ avisar!"

Exemplo Negativo
"Como voc√™ √© do ${userContext?.serie || 'ano n√£o informado'}, vou sempre falar s√≥ coisas desse n√≠vel."
(Evite: limitar as respostas s√≥ pelo cadastro)

Exemplo Positivo
"${userContext?.nome || 'Estudante'}, se quiser posso te dar dicas para melhorar em Matem√°tica, mas s√≥ se voc√™ quiser, ok?"

Exemplo Negativo
"Como voc√™ marcou dificuldade em Matem√°tica, sempre vou focar nisso."
(Evite: assumir prefer√™ncias sem pedido do usu√°rio)

üîî Regras de Neg√≥cio e UX
N√£o fa√ßa diagn√≥sticos, promessas de resultado ou coment√°rios sobre performance do usu√°rio sem solicita√ß√£o clara.

Use recursos do chat (voz, imagem, c√¢mera) sempre que for relevante, seguindo os comandos do usu√°rio e as boas pr√°ticas da plataforma.

Incentive o uso cont√≠nuo e o retorno ao Prof AI, mas nunca pressione o usu√°rio.

D√™ feedback claro e visual em caso de erro, d√∫vida ou se a pergunta estiver fora do seu escopo.

Priorize respostas que gerem aprendizado pr√°tico, autoestima e autonomia.

üìä Como saber se est√° funcionando?
Usu√°rios se sentem ouvidos e motivados, retornam ao app e indicam para amigos.

O chat fica mais objetivo e direto, mas sem perder o toque humano e personalizado.

As d√∫vidas dos alunos s√£o resolvidas em poucas trocas, com clareza e incentivo.

Siga este roteiro em todas as intera√ß√µes, adaptando conforme o contexto. Voc√™ √© o diferencial humano e inclusivo da educa√ß√£o via IA!

${tipo === 'imagem' ? '- Analise a imagem fornecida e explique o conte√∫do de forma educativa' : ''}`;

    // Preparar o conte√∫do para a API Gemini
    const contents = [
      {
        parts: [
          { text: systemPrompt },
          { text: `Pergunta do aluno: ${message}` }
        ]
      }
    ];

    // Se h√° imagem, adicionar ao conte√∫do
    if (image && tipo === 'imagem') {
      contents[0].parts.push({
        inlineData: {
          mimeType: "image/jpeg",
          data: image.split(',')[1] // Remove o prefixo data:image/jpeg;base64,
        }
      });
    }

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents,
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 1000,
          topP: 0.8,
          topK: 40
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('Erro da API Gemini:', errorData);
      throw new Error(`Erro da API Gemini: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    
    if (!data.candidates || data.candidates.length === 0) {
      throw new Error('Nenhuma resposta gerada pelo Gemini');
    }

    const generatedText = data.candidates[0].content.parts[0].text;

    return new Response(
      JSON.stringify({ 
        resposta: generatedText,
        metadata: {
          model: 'gemini-1.5-flash',
          tokensUsed: data.usageMetadata?.totalTokenCount || 0,
          tipo: tipo || 'texto'
        }
      }),
      { 
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        } 
      }
    );

  } catch (error) {
    console.error('Erro na fun√ß√£o chat-gemini:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message,
        fallback: "Desculpe, n√£o consegui processar sua pergunta no momento. Tente novamente em alguns instantes ou reformule sua d√∫vida."
      }),
      {
        status: 500,
        headers: { 
          ...corsHeaders, 
          'Content-Type': 'application/json' 
        },
      }
    );
  }
});